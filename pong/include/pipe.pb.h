// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipe.proto

#ifndef PROTOBUF_pipe_2eproto__INCLUDED
#define PROTOBUF_pipe_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_pipe_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsGameInputImpl();
void InitDefaultsGameInput();
void InitDefaultsGameStateImpl();
void InitDefaultsGameState();
inline void InitDefaults() {
  InitDefaultsGameInput();
  InitDefaultsGameState();
}
}  // namespace protobuf_pipe_2eproto
namespace pongpipe {
class GameInput;
class GameInputDefaultTypeInternal;
extern GameInputDefaultTypeInternal _GameInput_default_instance_;
class GameState;
class GameStateDefaultTypeInternal;
extern GameStateDefaultTypeInternal _GameState_default_instance_;
}  // namespace pongpipe
namespace pongpipe {

enum GameState_Pixels {
  GameState_Pixels_empty = 0,
  GameState_Pixels_paddle0 = 1,
  GameState_Pixels_paddle1 = 2,
  GameState_Pixels_ball = 3
};
bool GameState_Pixels_IsValid(int value);
const GameState_Pixels GameState_Pixels_Pixels_MIN = GameState_Pixels_empty;
const GameState_Pixels GameState_Pixels_Pixels_MAX = GameState_Pixels_ball;
const int GameState_Pixels_Pixels_ARRAYSIZE = GameState_Pixels_Pixels_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameState_Pixels_descriptor();
inline const ::std::string& GameState_Pixels_Name(GameState_Pixels value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameState_Pixels_descriptor(), value);
}
inline bool GameState_Pixels_Parse(
    const ::std::string& name, GameState_Pixels* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameState_Pixels>(
    GameState_Pixels_descriptor(), name, value);
}
// ===================================================================

class GameInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pongpipe.GameInput) */ {
 public:
  GameInput();
  virtual ~GameInput();

  GameInput(const GameInput& from);

  inline GameInput& operator=(const GameInput& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameInput(GameInput&& from) noexcept
    : GameInput() {
    *this = ::std::move(from);
  }

  inline GameInput& operator=(GameInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameInput* internal_default_instance() {
    return reinterpret_cast<const GameInput*>(
               &_GameInput_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(GameInput* other);
  friend void swap(GameInput& a, GameInput& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameInput* New() const PROTOBUF_FINAL { return New(NULL); }

  GameInput* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameInput& from);
  void MergeFrom(const GameInput& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool KeyUp = 1;
  bool has_keyup() const;
  void clear_keyup();
  static const int kKeyUpFieldNumber = 1;
  bool keyup() const;
  void set_keyup(bool value);

  // required bool KeyDown = 2;
  bool has_keydown() const;
  void clear_keydown();
  static const int kKeyDownFieldNumber = 2;
  bool keydown() const;
  void set_keydown(bool value);

  // @@protoc_insertion_point(class_scope:pongpipe.GameInput)
 private:
  void set_has_keyup();
  void clear_has_keyup();
  void set_has_keydown();
  void clear_has_keydown();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  bool keyup_;
  bool keydown_;
  friend struct ::protobuf_pipe_2eproto::TableStruct;
  friend void ::protobuf_pipe_2eproto::InitDefaultsGameInputImpl();
};
// -------------------------------------------------------------------

class GameState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:pongpipe.GameState) */ {
 public:
  GameState();
  virtual ~GameState();

  GameState(const GameState& from);

  inline GameState& operator=(const GameState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameState(GameState&& from) noexcept
    : GameState() {
    *this = ::std::move(from);
  }

  inline GameState& operator=(GameState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameState* internal_default_instance() {
    return reinterpret_cast<const GameState*>(
               &_GameState_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GameState* other);
  friend void swap(GameState& a, GameState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameState* New() const PROTOBUF_FINAL { return New(NULL); }

  GameState* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameState& from);
  void MergeFrom(const GameState& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GameState_Pixels Pixels;
  static const Pixels empty =
    GameState_Pixels_empty;
  static const Pixels paddle0 =
    GameState_Pixels_paddle0;
  static const Pixels paddle1 =
    GameState_Pixels_paddle1;
  static const Pixels ball =
    GameState_Pixels_ball;
  static inline bool Pixels_IsValid(int value) {
    return GameState_Pixels_IsValid(value);
  }
  static const Pixels Pixels_MIN =
    GameState_Pixels_Pixels_MIN;
  static const Pixels Pixels_MAX =
    GameState_Pixels_Pixels_MAX;
  static const int Pixels_ARRAYSIZE =
    GameState_Pixels_Pixels_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Pixels_descriptor() {
    return GameState_Pixels_descriptor();
  }
  static inline const ::std::string& Pixels_Name(Pixels value) {
    return GameState_Pixels_Name(value);
  }
  static inline bool Pixels_Parse(const ::std::string& name,
      Pixels* value) {
    return GameState_Pixels_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .pongpipe.GameState.Pixels board = 1 [packed = true];
  int board_size() const;
  void clear_board();
  static const int kBoardFieldNumber = 1;
  ::pongpipe::GameState_Pixels board(int index) const;
  void set_board(int index, ::pongpipe::GameState_Pixels value);
  void add_board(::pongpipe::GameState_Pixels value);
  const ::google::protobuf::RepeatedField<int>& board() const;
  ::google::protobuf::RepeatedField<int>* mutable_board();

  // @@protoc_insertion_point(class_scope:pongpipe.GameState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> board_;
  mutable int _board_cached_byte_size_;
  friend struct ::protobuf_pipe_2eproto::TableStruct;
  friend void ::protobuf_pipe_2eproto::InitDefaultsGameStateImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameInput

// required bool KeyUp = 1;
inline bool GameInput::has_keyup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInput::set_has_keyup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInput::clear_has_keyup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInput::clear_keyup() {
  keyup_ = false;
  clear_has_keyup();
}
inline bool GameInput::keyup() const {
  // @@protoc_insertion_point(field_get:pongpipe.GameInput.KeyUp)
  return keyup_;
}
inline void GameInput::set_keyup(bool value) {
  set_has_keyup();
  keyup_ = value;
  // @@protoc_insertion_point(field_set:pongpipe.GameInput.KeyUp)
}

// required bool KeyDown = 2;
inline bool GameInput::has_keydown() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInput::set_has_keydown() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInput::clear_has_keydown() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInput::clear_keydown() {
  keydown_ = false;
  clear_has_keydown();
}
inline bool GameInput::keydown() const {
  // @@protoc_insertion_point(field_get:pongpipe.GameInput.KeyDown)
  return keydown_;
}
inline void GameInput::set_keydown(bool value) {
  set_has_keydown();
  keydown_ = value;
  // @@protoc_insertion_point(field_set:pongpipe.GameInput.KeyDown)
}

// -------------------------------------------------------------------

// GameState

// repeated .pongpipe.GameState.Pixels board = 1 [packed = true];
inline int GameState::board_size() const {
  return board_.size();
}
inline void GameState::clear_board() {
  board_.Clear();
}
inline ::pongpipe::GameState_Pixels GameState::board(int index) const {
  // @@protoc_insertion_point(field_get:pongpipe.GameState.board)
  return static_cast< ::pongpipe::GameState_Pixels >(board_.Get(index));
}
inline void GameState::set_board(int index, ::pongpipe::GameState_Pixels value) {
  assert(::pongpipe::GameState_Pixels_IsValid(value));
  board_.Set(index, value);
  // @@protoc_insertion_point(field_set:pongpipe.GameState.board)
}
inline void GameState::add_board(::pongpipe::GameState_Pixels value) {
  assert(::pongpipe::GameState_Pixels_IsValid(value));
  board_.Add(value);
  // @@protoc_insertion_point(field_add:pongpipe.GameState.board)
}
inline const ::google::protobuf::RepeatedField<int>&
GameState::board() const {
  // @@protoc_insertion_point(field_list:pongpipe.GameState.board)
  return board_;
}
inline ::google::protobuf::RepeatedField<int>*
GameState::mutable_board() {
  // @@protoc_insertion_point(field_mutable_list:pongpipe.GameState.board)
  return &board_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pongpipe

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pongpipe::GameState_Pixels> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pongpipe::GameState_Pixels>() {
  return ::pongpipe::GameState_Pixels_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pipe_2eproto__INCLUDED
