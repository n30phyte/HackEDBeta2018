// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipe.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pipe.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pongpipe {

namespace {

const ::google::protobuf::Descriptor* GameInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GameState_Pixels_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pipe_2eproto() {
  protobuf_AddDesc_pipe_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pipe.proto");
  GOOGLE_CHECK(file != NULL);
  GameInput_descriptor_ = file->message_type(0);
  static const int GameInput_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInput, keyup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInput, keydown_),
  };
  GameInput_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInput_descriptor_,
      GameInput::default_instance_,
      GameInput_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInput, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInput, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInput));
  GameState_descriptor_ = file->message_type(1);
  static const int GameState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, board_),
  };
  GameState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameState_descriptor_,
      GameState::default_instance_,
      GameState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameState));
  GameState_Pixels_descriptor_ = GameState_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pipe_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInput_descriptor_, &GameInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameState_descriptor_, &GameState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pipe_2eproto() {
  delete GameInput::default_instance_;
  delete GameInput_reflection_;
  delete GameState::default_instance_;
  delete GameState_reflection_;
}

void protobuf_AddDesc_pipe_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\npipe.proto\022\010pongpipe\"+\n\tGameInput\022\r\n\005K"
    "eyUp\030\001 \002(\010\022\017\n\007KeyDown\030\002 \002(\010\"s\n\tGameState"
    "\022-\n\005board\030\001 \003(\0162\032.pongpipe.GameState.Pix"
    "elsB\002\020\001\"7\n\006Pixels\022\t\n\005empty\020\000\022\013\n\007paddle0\020"
    "\001\022\013\n\007paddle1\020\002\022\010\n\004ball\020\003", 184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pipe.proto", &protobuf_RegisterTypes);
  GameInput::default_instance_ = new GameInput();
  GameState::default_instance_ = new GameState();
  GameInput::default_instance_->InitAsDefaultInstance();
  GameState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pipe_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pipe_2eproto {
  StaticDescriptorInitializer_pipe_2eproto() {
    protobuf_AddDesc_pipe_2eproto();
  }
} static_descriptor_initializer_pipe_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GameInput::kKeyUpFieldNumber;
const int GameInput::kKeyDownFieldNumber;
#endif  // !_MSC_VER

GameInput::GameInput()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pongpipe.GameInput)
}

void GameInput::InitAsDefaultInstance() {
}

GameInput::GameInput(const GameInput& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pongpipe.GameInput)
}

void GameInput::SharedCtor() {
  _cached_size_ = 0;
  keyup_ = false;
  keydown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInput::~GameInput() {
  // @@protoc_insertion_point(destructor:pongpipe.GameInput)
  SharedDtor();
}

void GameInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInput_descriptor_;
}

const GameInput& GameInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

GameInput* GameInput::default_instance_ = NULL;

GameInput* GameInput::New() const {
  return new GameInput;
}

void GameInput::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameInput*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(keyup_, keydown_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pongpipe.GameInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool KeyUp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keyup_)));
          set_has_keyup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_KeyDown;
        break;
      }

      // required bool KeyDown = 2;
      case 2: {
        if (tag == 16) {
         parse_KeyDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keydown_)));
          set_has_keydown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pongpipe.GameInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pongpipe.GameInput)
  return false;
#undef DO_
}

void GameInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pongpipe.GameInput)
  // required bool KeyUp = 1;
  if (has_keyup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->keyup(), output);
  }

  // required bool KeyDown = 2;
  if (has_keydown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->keydown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pongpipe.GameInput)
}

::google::protobuf::uint8* GameInput::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pongpipe.GameInput)
  // required bool KeyUp = 1;
  if (has_keyup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->keyup(), target);
  }

  // required bool KeyDown = 2;
  if (has_keydown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->keydown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pongpipe.GameInput)
  return target;
}

int GameInput::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool KeyUp = 1;
    if (has_keyup()) {
      total_size += 1 + 1;
    }

    // required bool KeyDown = 2;
    if (has_keydown()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInput::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInput* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInput*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInput::MergeFrom(const GameInput& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyup()) {
      set_keyup(from.keyup());
    }
    if (from.has_keydown()) {
      set_keydown(from.keydown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInput::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInput::CopyFrom(const GameInput& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInput::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameInput::Swap(GameInput* other) {
  if (other != this) {
    std::swap(keyup_, other->keyup_);
    std::swap(keydown_, other->keydown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInput_descriptor_;
  metadata.reflection = GameInput_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* GameState_Pixels_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_Pixels_descriptor_;
}
bool GameState_Pixels_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const GameState_Pixels GameState::empty;
const GameState_Pixels GameState::paddle0;
const GameState_Pixels GameState::paddle1;
const GameState_Pixels GameState::ball;
const GameState_Pixels GameState::Pixels_MIN;
const GameState_Pixels GameState::Pixels_MAX;
const int GameState::Pixels_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int GameState::kBoardFieldNumber;
#endif  // !_MSC_VER

GameState::GameState()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pongpipe.GameState)
}

void GameState::InitAsDefaultInstance() {
}

GameState::GameState(const GameState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pongpipe.GameState)
}

void GameState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameState::~GameState() {
  // @@protoc_insertion_point(destructor:pongpipe.GameState)
  SharedDtor();
}

void GameState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameState_descriptor_;
}

const GameState& GameState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pipe_2eproto();
  return *default_instance_;
}

GameState* GameState::default_instance_ = NULL;

GameState* GameState::New() const {
  return new GameState;
}

void GameState::Clear() {
  board_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pongpipe.GameState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pongpipe.GameState.Pixels board = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            if (::pongpipe::GameState_Pixels_IsValid(value)) {
              add_board(static_cast< ::pongpipe::GameState_Pixels >(value));
            }
          }
          input->PopLimit(limit);
        } else if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pongpipe::GameState_Pixels_IsValid(value)) {
            add_board(static_cast< ::pongpipe::GameState_Pixels >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pongpipe.GameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pongpipe.GameState)
  return false;
#undef DO_
}

void GameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pongpipe.GameState)
  // repeated .pongpipe.GameState.Pixels board = 1 [packed = true];
  if (this->board_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_board_cached_byte_size_);
  }
  for (int i = 0; i < this->board_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->board(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pongpipe.GameState)
}

::google::protobuf::uint8* GameState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pongpipe.GameState)
  // repeated .pongpipe.GameState.Pixels board = 1 [packed = true];
  if (this->board_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _board_cached_byte_size_, target);
  }
  for (int i = 0; i < this->board_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->board(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pongpipe.GameState)
  return target;
}

int GameState::ByteSize() const {
  int total_size = 0;

  // repeated .pongpipe.GameState.Pixels board = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->board_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->board(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _board_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameState::MergeFrom(const GameState& from) {
  GOOGLE_CHECK_NE(&from, this);
  board_.MergeFrom(from.board_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameState::CopyFrom(const GameState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameState::IsInitialized() const {

  return true;
}

void GameState::Swap(GameState* other) {
  if (other != this) {
    board_.Swap(&other->board_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameState_descriptor_;
  metadata.reflection = GameState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pongpipe

// @@protoc_insertion_point(global_scope)
